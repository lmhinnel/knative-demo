apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: >
      {"apiVersion":"tekton.dev/v1beta1","kind":"Pipeline","metadata":{"annotations":{"manifestival":"new"},"labels":{"function.knative.dev/name":"hello","function.knative.dev/runtime":"go"},"name":"hello-pack-upload-pipeline","namespace":"default"},"spec":{"params":[{"default":"","description":"Git
      repository that hosts the function
      project","name":"gitRepository","type":"string"},{"description":"Git
      revision to
      build","name":"gitRevision","type":"string"},{"default":"","description":"Path
      where the function project
      is","name":"contextDir","type":"string"},{"description":"Function image
      name","name":"imageName","type":"string"},{"description":"The registry
      associated with the function
      image","name":"registry","type":"string"},{"description":"Builder image to
      be
      used","name":"builderImage","type":"string"},{"description":"Environment
      variables to set during build
      time","name":"buildEnvs","type":"array"}],"tasks":[{"name":"scaffold","params":[{"name":"path","value":"$(workspaces.source.path)/$(params.contextDir)"}],"taskSpec":{"params":[{"default":"","description":"Path
      to the function
      project","name":"path"}],"steps":[{"command":["scaffold","$(params.path)"],"image":"ghcr.io/knative/func-utils:v2","name":"func-scaffold"}],"workspaces":[{"description":"The
      workspace containing the function
      project","name":"source"}]},"workspaces":[{"name":"source","workspace":"source-workspace"}]},{"name":"build","params":[{"name":"APP_IMAGE","value":"$(params.imageName)"},{"name":"REGISTRY","value":"$(params.registry)"},{"name":"SOURCE_SUBPATH","value":"$(params.contextDir)"},{"name":"BUILDER_IMAGE","value":"$(params.builderImage)"},{"name":"ENV_VARS","value":["$(params.buildEnvs[*])"]}],"runAfter":["scaffold"],"taskSpec":{"description":"The
      Knative Functions Buildpacks task builds source into a container image and
      pushes it to a registry, using Cloud Native Buildpacks. This task is based
      on the Buildpacks Tekton task v 0.4.","params":[{"description":"The name
      of where to store the app image.","name":"APP_IMAGE"},{"description":"The
      registry associated with the function
      image.","name":"REGISTRY"},{"description":"The image on which builds will
      run (must include lifecycle and compatible
      buildpacks).","name":"BUILDER_IMAGE"},{"default":"","description":"A
      subpath within the \"source\" input where the source to build is
      located.","name":"SOURCE_SUBPATH"},{"default":[],"description":"Environment
      variables to set during
      _build-time_.","name":"ENV_VARS","type":"array"},{"default":"","description":"Reference
      to a run image to
      use.","name":"RUN_IMAGE"},{"default":"","description":"The name of the
      persistent app cache image (if no cache workspace is
      provided).","name":"CACHE_IMAGE"},{"default":"false","description":"Do not
      write layer metadata or restore cached
      layers.","name":"SKIP_RESTORE"},{"default":"1001","description":"The user
      ID of the builder image
      user.","name":"USER_ID"},{"default":"0","description":"The group ID of the
      builder image
      user.","name":"GROUP_ID"},{"default":"empty-dir","description":"The name
      of the platform
      directory.","name":"PLATFORM_DIR"}],"results":[{"description":"The digest
      of the built
      \"APP_IMAGE\".","name":"IMAGE_DIGEST"}],"stepTemplate":{"env":[{"name":"CNB_PLATFORM_API","value":"0.10"}]},"steps":[{"args":["--env-vars","$(params.ENV_VARS[*])"],"image":"docker.io/library/bash:5.1","name":"prepare","script":"#!/usr/bin/env
      bash\nset -e\n\nif [[ \"$(workspaces.cache.bound)\" == \"true\" ]];
      then\n  echo \"\u003e Setting permissions on
      '$(workspaces.cache.path)'...\"\n  chown -R
      \"$(params.USER_ID):$(params.GROUP_ID)\"
      \"$(workspaces.cache.path)\"\nfi\n\n#######################################################\n##### 
      \"/emptyDir\" has been added for Knative Functions\nfor path in
      \"/tekton/home\" \"/layers\" \"/emptyDir\" \"$(workspaces.source.path)\";
      do\n  echo \"\u003e Setting permissions on '$path'...\"\n  chown -R
      \"$(params.USER_ID):$(params.GROUP_ID)\" \"$path\"\n\n  if [[ \"$path\" ==
      \"$(workspaces.source.path)\" ]]; then\n      chmod 775
      \"$(workspaces.source.path)\"\n  fi\ndone\n\necho \"\u003e Parsing
      additional configuration...\"\nparsing_flag=\"\"\nenvs=()\nfor arg in
      \"$@\"; do\n    if [[ \"$arg\" == \"--env-vars\" ]]; then\n        echo
      \"-\u003e Parsing env variables...\"\n       
      parsing_flag=\"env-vars\"\n    elif [[ \"$parsing_flag\" == \"env-vars\"
      ]]; then\n        envs+=(\"$arg\")\n    fi\ndone\n\necho \"\u003e
      Processing any environment
      variables...\"\nENV_DIR=\"/platform/env\"\n\necho \"--\u003e Creating
      'env' directory: $ENV_DIR\"\nmkdir -p \"$ENV_DIR\"\n\nfor env in
      \"${envs[@]}\"; do\n    IFS='=' read -r key value \u003c\u003c\u003c
      \"$env\"\n    if [[ \"$key\" != \"\" \u0026\u0026 \"$value\" != \"\" ]];
      then\n        path=\"${ENV_DIR}/${key}\"\n        echo \"--\u003e Writing
      ${path}...\"\n        echo -n \"$value\" \u003e \"$path\"\n   
      fi\ndone\n\n############################################\n##### Added part
      for Knative Functions
      #####\n############################################\n\nfunc_file=\"$(workspaces.source.path)/func.yaml\"\nif
      [ \"$(params.SOURCE_SUBPATH)\" != \"\" ]; then\n 
      func_file=\"$(workspaces.source.path)/$(params.SOURCE_SUBPATH)/func.yaml\"\nfi\necho
      \"--\u003e Saving 'func.yaml'\"\ncp $func_file
      /emptyDir/func.yaml\n\n############################################\n","volumeMounts":[{"mountPath":"/layers","name":"layers-dir"},{"mountPath":"/platform","name":"$(params.PLATFORM_DIR)"},{"mountPath":"/emptyDir","name":"empty-dir"}]},{"args":["-app=$(workspaces.source.path)/$(params.SOURCE_SUBPATH)","-cache-dir=$(workspaces.cache.path)","-cache-image=$(params.CACHE_IMAGE)","-uid=$(params.USER_ID)","-gid=$(params.GROUP_ID)","-layers=/layers","-platform=/platform","-report=/layers/report.toml","-skip-restore=$(params.SKIP_RESTORE)","-previous-image=$(params.APP_IMAGE)","-run-image=$(params.RUN_IMAGE)","$(params.APP_IMAGE)"],"command":["/cnb/lifecycle/creator"],"env":[{"name":"DOCKER_CONFIG","value":"$(workspaces.dockerconfig.path)"}],"image":"$(params.BUILDER_IMAGE)","imagePullPolicy":"Always","name":"create","securityContext":{"runAsGroup":0,"runAsUser":1001},"volumeMounts":[{"mountPath":"/layers","name":"layers-dir"},{"mountPath":"/platform","name":"$(params.PLATFORM_DIR)"}]},{"image":"docker.io/library/bash:5.1","name":"results","script":"#!/usr/bin/env
      bash\nset -e\ncat /layers/report.toml | grep \"digest\" | cut -d'\"' -f2 |
      cut -d'\"' -f2 | tr -d '\\n' | tee
      $(results.IMAGE_DIGEST.path)\n\n############################################\n#####
      Added part for Knative Functions
      #####\n############################################\n\ndigest=$(cat
      $(results.IMAGE_DIGEST.path))\n\nfunc_file=\"$(workspaces.source.path)/func.yaml\"\nif
      [ \"$(params.SOURCE_SUBPATH)\" != \"\" ]; then\n 
      func_file=\"$(workspaces.source.path)/$(params.SOURCE_SUBPATH)/func.yaml\"\nfi\n\nif
      [[ ! -f \"$func_file\" ]]; then\n  echo \"--\u003e Restoring
      'func.yaml'\"\n  mkdir -p
      \"$(workspaces.source.path)/$(params.SOURCE_SUBPATH)\"\n  cp
      /emptyDir/func.yaml $func_file\nfi\n\necho \"\"\nsed -i
      \"s|^image:.*$|image: $(params.APP_IMAGE)|\" \"$func_file\"\necho
      \"Function image name: $(params.APP_IMAGE)\"\n\nsed -i
      \"s/^imageDigest:.*$/imageDigest: $digest/\" \"$func_file\"\necho
      \"Function image digest: $digest\"\n\nsed -i \"s|^registry:.*$|registry:
      $(params.REGISTRY)|\" \"$func_file\"\necho \"Function image registry:
      $(params.REGISTRY)\"\n\n############################################\n","volumeMounts":[{"mountPath":"/layers","name":"layers-dir"},{"mountPath":"/emptyDir","name":"empty-dir"}]}],"volumes":[{"emptyDir":{},"name":"empty-dir"},{"emptyDir":{},"name":"layers-dir"}],"workspaces":[{"description":"Directory
      where application source is
      located.","name":"source"},{"description":"Directory where cache is stored
      (when no cache image is
      provided).","name":"cache","optional":true},{"description":"An optional
      workspace that allows providing a .docker/config.json file for Buildpacks
      lifecycle binary to access the container registry. The file should be
      placed at the root of the Workspace with name
      config.json.","name":"dockerconfig","optional":true}]},"workspaces":[{"name":"source","workspace":"source-workspace"},{"name":"cache","workspace":"cache-workspace"},{"name":"dockerconfig","workspace":"dockerconfig-workspace"}]},{"name":"deploy","params":[{"name":"path","value":"$(workspaces.source.path)/$(params.contextDir)"},{"name":"image","value":"$(params.imageName)@$(tasks.build.results.IMAGE_DIGEST)"}],"runAfter":["build"],"taskSpec":{"description":"This
      Task performs a deploy operation using the Knative \"func\"\"
      CLI","params":[{"default":"","description":"Path to the function
      project","name":"path"},{"default":"","description":"Container image to be
      deployed","name":"image"}],"steps":[{"command":["deploy","$(params.path)","$(params.image)"],"image":"ghcr.io/knative/func-utils:v2","name":"func-deploy"}],"workspaces":[{"description":"The
      workspace containing the function
      project","name":"source"}]},"workspaces":[{"name":"source","workspace":"source-workspace"}]}],"workspaces":[{"description":"Directory
      where function source is
      located.","name":"source-workspace"},{"description":"Directory where build
      cache is stored.","name":"cache-workspace"},{"description":"Directory
      containing image registry credentials stored in config.json
      file.","name":"dockerconfig-workspace","optional":true}]}}
    manifestival: new
  creationTimestamp: "2025-10-21T06:41:01Z"
  generation: 1
  labels:
    function.knative.dev/name: hello
    function.knative.dev/runtime: go
  name: hello-pack-upload-pipeline
  namespace: default
  resourceVersion: "97635"
  selfLink: /apis/tekton.dev/v1/namespaces/default/pipelines/hello-pack-upload-pipeline
  uid: 1d574ab5-f340-410a-a1ab-438483fe39ee
spec:
  params:
  - default: ""
    description: Git repository that hosts the function project
    name: gitRepository
    type: string
  - description: Git revision to build
    name: gitRevision
    type: string
  - default: ""
    description: Path where the function project is
    name: contextDir
    type: string
  - description: Function image name
    name: imageName
    type: string
  - description: The registry associated with the function image
    name: registry
    type: string
  - description: Builder image to be used
    name: builderImage
    type: string
  - description: Environment variables to set during build time
    name: buildEnvs
    type: array
  tasks:
  - name: scaffold
    params:
    - name: path
      value: $(workspaces.source.path)/$(params.contextDir)
    taskSpec:
      metadata: {}
      params:
      - default: ""
        description: Path to the function project
        name: path
        type: string
      spec: null
      steps:
      - command:
        - scaffold
        - $(params.path)
        computeResources: {}
        image: ghcr.io/knative/func-utils:v2
        name: func-scaffold
      workspaces:
      - description: The workspace containing the function project
        name: source
    workspaces:
    - name: source
      workspace: source-workspace
  - name: build
    params:
    - name: APP_IMAGE
      value: $(params.imageName)
    - name: REGISTRY
      value: $(params.registry)
    - name: SOURCE_SUBPATH
      value: $(params.contextDir)
    - name: BUILDER_IMAGE
      value: $(params.builderImage)
    - name: ENV_VARS
      value:
      - $(params.buildEnvs[*])
    runAfter:
    - scaffold
    taskSpec:
      description: >-
        The Knative Functions Buildpacks task builds source into a container
        image and pushes it to a registry, using Cloud Native Buildpacks. This
        task is based on the Buildpacks Tekton task v 0.4.
      metadata: {}
      params:
      - description: The name of where to store the app image.
        name: APP_IMAGE
        type: string
      - description: The registry associated with the function image.
        name: REGISTRY
        type: string
      - description: >-
          The image on which builds will run (must include lifecycle and
          compatible buildpacks).
        name: BUILDER_IMAGE
        type: string
      - default: ""
        description: >-
          A subpath within the "source" input where the source to build is
          located.
        name: SOURCE_SUBPATH
        type: string
      - default: []
        description: Environment variables to set during _build-time_.
        name: ENV_VARS
        type: array
      - default: ""
        description: Reference to a run image to use.
        name: RUN_IMAGE
        type: string
      - default: ""
        description: >-
          The name of the persistent app cache image (if no cache workspace is
          provided).
        name: CACHE_IMAGE
        type: string
      - default: "false"
        description: Do not write layer metadata or restore cached layers.
        name: SKIP_RESTORE
        type: string
      - default: "1001"
        description: The user ID of the builder image user.
        name: USER_ID
        type: string
      - default: "0"
        description: The group ID of the builder image user.
        name: GROUP_ID
        type: string
      - default: empty-dir
        description: The name of the platform directory.
        name: PLATFORM_DIR
        type: string
      results:
      - description: The digest of the built "APP_IMAGE".
        name: IMAGE_DIGEST
        type: string
      spec: null
      stepTemplate:
        computeResources: {}
        env:
        - name: CNB_PLATFORM_API
          value: "0.10"
      steps:
      - args:
        - "--env-vars"
        - $(params.ENV_VARS[*])
        computeResources: {}
        image: docker.io/library/bash:5.1
        name: prepare
        script: >
          #!/usr/bin/env bash

          set -e


          if [[ "$(workspaces.cache.bound)" == "true" ]]; then
            echo "> Setting permissions on '$(workspaces.cache.path)'..."
            chown -R "$(params.USER_ID):$(params.GROUP_ID)" "$(workspaces.cache.path)"
          fi


          #######################################################

          #####  "/emptyDir" has been added for Knative Functions

          for path in "/tekton/home" "/layers" "/emptyDir"
          "$(workspaces.source.path)"; do
            echo "> Setting permissions on '$path'..."
            chown -R "$(params.USER_ID):$(params.GROUP_ID)" "$path"

            if [[ "$path" == "$(workspaces.source.path)" ]]; then
                chmod 775 "$(workspaces.source.path)"
            fi
          done


          echo "> Parsing additional configuration..."

          parsing_flag=""

          envs=()

          for arg in "$@"; do
              if [[ "$arg" == "--env-vars" ]]; then
                  echo "-> Parsing env variables..."
                  parsing_flag="env-vars"
              elif [[ "$parsing_flag" == "env-vars" ]]; then
                  envs+=("$arg")
              fi
          done


          echo "> Processing any environment variables..."

          ENV_DIR="/platform/env"


          echo "--> Creating 'env' directory: $ENV_DIR"

          mkdir -p "$ENV_DIR"


          for env in "${envs[@]}"; do
              IFS='=' read -r key value <<< "$env"
              if [[ "$key" != "" && "$value" != "" ]]; then
                  path="${ENV_DIR}/${key}"
                  echo "--> Writing ${path}..."
                  echo -n "$value" > "$path"
              fi
          done


          ############################################

          ##### Added part for Knative Functions #####

          ############################################


          func_file="$(workspaces.source.path)/func.yaml"

          if [ "$(params.SOURCE_SUBPATH)" != "" ]; then
            func_file="$(workspaces.source.path)/$(params.SOURCE_SUBPATH)/func.yaml"
          fi

          echo "--> Saving 'func.yaml'"

          cp $func_file /emptyDir/func.yaml


          ############################################
        volumeMounts:
        - mountPath: /layers
          name: layers-dir
        - mountPath: /platform
          name: $(params.PLATFORM_DIR)
        - mountPath: /emptyDir
          name: empty-dir
      - args:
        - "-app=$(workspaces.source.path)/$(params.SOURCE_SUBPATH)"
        - "-cache-dir=$(workspaces.cache.path)"
        - "-cache-image=$(params.CACHE_IMAGE)"
        - "-uid=$(params.USER_ID)"
        - "-gid=$(params.GROUP_ID)"
        - "-layers=/layers"
        - "-platform=/platform"
        - "-report=/layers/report.toml"
        - "-skip-restore=$(params.SKIP_RESTORE)"
        - "-previous-image=$(params.APP_IMAGE)"
        - "-run-image=$(params.RUN_IMAGE)"
        - $(params.APP_IMAGE)
        command:
        - /cnb/lifecycle/creator
        computeResources: {}
        env:
        - name: DOCKER_CONFIG
          value: $(workspaces.dockerconfig.path)
        image: $(params.BUILDER_IMAGE)
        imagePullPolicy: Always
        name: create
        securityContext:
          runAsGroup: 0
          runAsUser: 1001
        volumeMounts:
        - mountPath: /layers
          name: layers-dir
        - mountPath: /platform
          name: $(params.PLATFORM_DIR)
      - computeResources: {}
        image: docker.io/library/bash:5.1
        name: results
        script: >
          #!/usr/bin/env bash

          set -e

          cat /layers/report.toml | grep "digest" | cut -d'"' -f2 | cut -d'"'
          -f2 | tr -d '\n' | tee $(results.IMAGE_DIGEST.path)


          ############################################

          ##### Added part for Knative Functions #####

          ############################################


          digest=$(cat $(results.IMAGE_DIGEST.path))


          func_file="$(workspaces.source.path)/func.yaml"

          if [ "$(params.SOURCE_SUBPATH)" != "" ]; then
            func_file="$(workspaces.source.path)/$(params.SOURCE_SUBPATH)/func.yaml"
          fi


          if [[ ! -f "$func_file" ]]; then
            echo "--> Restoring 'func.yaml'"
            mkdir -p "$(workspaces.source.path)/$(params.SOURCE_SUBPATH)"
            cp /emptyDir/func.yaml $func_file
          fi


          echo ""

          sed -i "s|^image:.*$|image: $(params.APP_IMAGE)|" "$func_file"

          echo "Function image name: $(params.APP_IMAGE)"


          sed -i "s/^imageDigest:.*$/imageDigest: $digest/" "$func_file"

          echo "Function image digest: $digest"


          sed -i "s|^registry:.*$|registry: $(params.REGISTRY)|" "$func_file"

          echo "Function image registry: $(params.REGISTRY)"


          ############################################
        volumeMounts:
        - mountPath: /layers
          name: layers-dir
        - mountPath: /emptyDir
          name: empty-dir
      volumes:
      - emptyDir: {}
        name: empty-dir
      - emptyDir: {}
        name: layers-dir
      workspaces:
      - description: Directory where application source is located.
        name: source
      - description: Directory where cache is stored (when no cache image is provided).
        name: cache
        optional: true
      - description: >-
          An optional workspace that allows providing a .docker/config.json file
          for Buildpacks lifecycle binary to access the container registry. The
          file should be placed at the root of the Workspace with name
          config.json.
        name: dockerconfig
        optional: true
    workspaces:
    - name: source
      workspace: source-workspace
    - name: cache
      workspace: cache-workspace
    - name: dockerconfig
      workspace: dockerconfig-workspace
  - name: deploy
    params:
    - name: path
      value: $(workspaces.source.path)/$(params.contextDir)
    - name: image
      value: $(params.imageName)@$(tasks.build.results.IMAGE_DIGEST)
    runAfter:
    - build
    taskSpec:
      description: This Task performs a deploy operation using the Knative "func"" CLI
      metadata: {}
      params:
      - default: ""
        description: Path to the function project
        name: path
        type: string
      - default: ""
        description: Container image to be deployed
        name: image
        type: string
      spec: null
      steps:
      - command:
        - deploy
        - $(params.path)
        - $(params.image)
        computeResources: {}
        image: ghcr.io/knative/func-utils:v2
        name: func-deploy
      workspaces:
      - description: The workspace containing the function project
        name: source
    workspaces:
    - name: source
      workspace: source-workspace
  workspaces:
  - description: Directory where function source is located.
    name: source-workspace
  - description: Directory where build cache is stored.
    name: cache-workspace
  - description: >-
      Directory containing image registry credentials stored in config.json
      file.
    name: dockerconfig-workspace
    optional: true
